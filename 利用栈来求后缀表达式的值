#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>

// 函数：评估后缀表达式并返回结果
int EvaluatePostfix(char *expression);

// 函数：执行运算并返回结果
int PerformOperation(char operation, int operand1, int operand2);

// 函数：验证字符是否为运算符
int IsOperator(char C);

// 函数：验证字符是否为数字
int IsNumericDigit(char C);

int main()
{
    char expression[100];
    printf("输入后缀表达式:\n");
    fgets(expression, sizeof(expression), stdin);
    expression[strlen(expression) - 1] = '\0'; // 去除换行符

    int result = EvaluatePostfix(expression);
    printf("输出 = %d\n", result);

    return 0;
}

// 函数：评估后缀表达式并返回结果
int EvaluatePostfix(char *expression)
{
    int stack[100]; // 使用数组作为栈
    int top = -1;

    for (int i = 0; i < strlen(expression); i++) {
        // 如果字符是分隔符，继续
        if (expression[i] == ' ' || expression[i] == ',') continue;

        // 如果字符是运算符，从栈中弹出两个元素，执行运算，然后将结果推回栈中
        else if (IsOperator(expression[i])) {
            // 弹出两个操作数
            int operand2 = stack[top--];
            int operand1 = stack[top--];
            // 执行运算
            int result = PerformOperation(expression[i], operand1, operand2);
            // 将运算结果推回栈
            stack[++top] = result;
        } else if (IsNumericDigit(expression[i])) {
            // 从字符串中提取数值操作数
            // 只要得到数字，就不断增加i
            int operand = 0;
            while (i < strlen(expression) && IsNumericDigit(expression[i])) {
                // 对于多位数，因为我们是从左向右扫描
                // 每次我们得到一个右侧数字，就可以将操作数中的当前总和乘以10
                // 然后加上新的数字
                operand = (operand * 10) + (expression[i] - '0');
                i++;
            }
            // 最终，您将退出while循环，i设置为非数字字符或字符串末尾
            // 减小i，因为在循环的增量部分中将再次增加i，不希望跳过非数字字符
            i--;

            // 将操作数推入栈
            stack[++top] = operand;
        }
    }
    // 如果表达式格式正确，栈最终只会有一个元素，这将是输出
    return stack[top];
}

// 函数：验证字符是否为数字
int IsNumericDigit(char C)
{
    return (C >= '0' && C <= '9');
}

// 函数：验证字符是否为运算符
int IsOperator(char C)
{
    return (C == '+' || C == '-' || C == '*' || C == '/');
}

// 函数：执行运算并返回结果
int PerformOperation(char operation, int operand1, int operand2)
{
    switch (operation) {
        case '+':
            return operand1 + operand2;
        case '-':
            return operand1 - operand2;
        case '*':
            return operand1 * operand2;
        case '/':
            return operand1 / operand2;
        default:
            printf("意外错误\n");
            return -1;
    }
}
